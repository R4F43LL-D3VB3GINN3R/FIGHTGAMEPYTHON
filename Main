import pygame 
from fighter import Fighter

pygame.init() # INICIALIZA O PYGAME.

# CRIA A JANELA DO JOGO.
SCREEN_WIDTH = 1000 # LARGURA
SCREEN_HEIGHT = 600 # ALTURA
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("SPONGEFIGHTERS")

# FRAMERATE
clock = pygame.time.Clock() # CRIA RELOGIO PYGAME.
FPS = 60 # CRIA UMA VARIAVEL PARA RECEBER O VALOR DO QUE SERA O FPS.

# DEFINIR CORES.
RED = (255, 0, 0) # A VARIAVEL RECEBE A COR VERMELHA.
YELLOW = (255, 255, 0) # A VARIAVEL RECEBE A COR AMARELA.
WHITE = (255, 255, 255) # A VARIAVEL RECEBE A COR BRANCA.

# DEFINIR VARI√ÅVEIS DE LUTADORES.
BOB_SIZE = 162
BOB_DATA = [BOB_SIZE]
PATRICK_SIZE = 250
PATRICK_DATA = [PATRICK_SIZE]


bg_image = pygame.image.load("assets/images/background/background1.jpg").convert_alpha() # CARREGA O PLANO DE FUNDO.

bob_sheet = pygame.image.load("assets/images/spongebob/SPONGEBOBNORMAL.png").convert_alpha() # CARREGAR SPRITES. 
patrick_sheet = pygame.image.load("assets/images/patrick/PATRICKNORMAL.png").convert_alpha() # CARREGAR SPRITES. 

# DEFINIR O NUMERO DE PASSOS EM CADA SPRITE. 
BOB_ANIMATION_STEPS = [7]


def draw_bg(): # FUNCAO PARA DESENHAR O PLANO DE FUNDO.
    scaled_bg = pygame.transform.scale(bg_image, (SCREEN_WIDTH, SCREEN_HEIGHT)) # ACOMODA O TAMANHO DA IMAGEM AO TAMANHO DA TELA.
    screen.blit(bg_image, (0, 0))

def draw_health_bar(health, x, y): # FUNCAO PARA DESENHAR AS BARRAS DE PONTOS DE VIDA.
    ratio = health / 100 # A VARIAVEL CARREGA A PROPORCAO DE PONTOS DE VIDA EM RELACAO AO VALOR MAXIMO DE PONTOS DE VIDA.
    pygame.draw.rect(screen, WHITE, (x - 2, y - 2, 404, 34)) # DESENHA UM RETANGULO BRANCO COMO O CONTORNO DA BARRA DE PONTOS DE VIDA.
    pygame.draw.rect(screen, RED, (x, y, 400, 30)) # DESENHA UM RETANGULO VERMELHO NA TELA COMO OS PONTOS DE VIDA PERDIDOS.
    pygame.draw.rect(screen,  YELLOW, (x, y, 400 * ratio, 30)) # DESENHA UM RETANGULO AMARELO NA TELA COMO AS BARRAS DE PONTOS DE VIDA.

# CRIA DUAS INSTANCIAS DA CLASSE FIGHTER.
fighter_1 = Fighter(200, 310, BOB_DATA, bob_sheet, BOB_ANIMATION_STEPS) # UM RETANGULO QUE RECEBE COORDENADAS.
fighter_2 = Fighter(700, 310) # UM RETANGULO QUE RECEBE COORDENADAS.

# RODA O JOGO.
run = True
while run: # ENQUANTO O JOGO ESTIVER RODANDO...

    clock.tick(FPS) # CONTROLA A TAXA DE QUADROS POR SEGUNDO SENDO O VALOR DA VARIAVEL FPS.

    # CHAMA A FUNCAO PARA DESENHAS O PLANO DE FUNDO.
    draw_bg()

    # EXIBE AS BARRAS DE PONTOS DE VIDA.
    draw_health_bar(fighter_1.health, 20, 20)
    draw_health_bar(fighter_2.health, 580, 20)

    # MOVIMENTA OS LUTADORES
    fighter_1.move(SCREEN_WIDTH, SCREEN_HEIGHT, screen, fighter_2)

    # DESENHA OS LUTADORES NA TELA.
    fighter_1.draw(screen)
    fighter_2.draw(screen)

    # COORDENA EVENTOS
    for event in pygame.event.get(): # ITERA POR TODOS OS EVENTOS CRIADOS PELO PYGAME.
        if event.type == pygame.QUIT: # SE O TIPO DE EVENTO FOR O DE SAIDA...
            run = False # O JOGO PARA DE RODAR.

    # ATUALIZA OS EVENTOS QUE ACONTECEM NA TELA DE JOGO.
    pygame.display.update()

pygame.quit() # SAI DO JOGO.
